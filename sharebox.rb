require 'socket'
require 'thread'
require 'uri'
require 'base64'

$sharebox_version = 0.9
$semaphore = Mutex.new
$fileSemaphore = Mutex.new
$sharebox = "SGVyZSdzIHRvIHRoZSBjcmF6eSBvbmVzLgpUaGUgbWlzZml0cy4KVGhlIHJlYmVscy4KVGhlIHRyb3VibGVtYWtlcnMuClRoZSByb3VuZCBwZWdzIGluIHRoZSBzcXVhcmUgaG9sZXMuClRoZSBvbmVzIHdobyBzZWUgdGhpbmdzIGRpZmZlcmVudGx5LgpUaGV5J3JlIG5vdCBmb25kIG9mIHJ1bGVzLgpBbmQgdGhleSBoYXZlIG5vIHJlc3BlY3QgZm9yIHRoZSBzdGF0dXMgcXVvLgpZb3UgY2FuIHF1b3RlIHRoZW0sIGRpc2FncmVlIHdpdGggdGhlbSwgZ2xvcmlmeSBvciB2aWxpZnkgdGhlbS4KQWJvdXQgdGhlIG9ubHkgdGhpbmcgeW91IGNhbid0IGRvIGlzIGlnbm9yZSB0aGVtLgpCZWNhdXNlIHRoZXkgY2hhbmdlIHRoaW5ncy4KVGhleSBwdXNoIHRoZSBodW1hbiByYWNlIGZvcndhcmQuCldoaWxlIHNvbWUgc2VlIHRoZW0gYXMgdGhlIGNyYXp5IG9uZXMsIHdlIHNlZSBnZW5pdXMuCkJlY2F1c2UgdGhlIHBlb3BsZSB3aG8gYXJlIGNyYXp5IGVub3VnaCB0byB0aGluawp0aGV5IGNhbiBjaGFuZ2UgdGhlIHdvcmxkLCBhcmUgdGhlIG9uZXMgd2hvIGRvLgo="
dropzone = "IWZ1bmN0aW9uKCl7ZnVuY3Rpb24gYShiLGMsZCl7dmFyIGU9YS5yZXNvbHZlKGIpO2lmKG51bGw9PWUpe2Q9ZHx8YixjPWN8fCJyb290Ijt2YXIgZj1uZXcgRXJyb3IoJ0ZhaWxlZCB0byByZXF1aXJlICInK2QrJyIgZnJvbSAiJytjKyciJyk7dGhyb3cgZi5wYXRoPWQsZi5wYXJlbnQ9YyxmLnJlcXVpcmU9ITAsZn12YXIgZz1hLm1vZHVsZXNbZV07aWYoIWcuX3Jlc29sdmluZyYmIWcuZXhwb3J0cyl7dmFyIGg9e307aC5leHBvcnRzPXt9LGguY2xpZW50PWguY29tcG9uZW50PSEwLGcuX3Jlc29sdmluZz0hMCxnLmNhbGwodGhpcyxoLmV4cG9ydHMsYS5yZWxhdGl2ZShlKSxoKSxkZWxldGUgZy5fcmVzb2x2aW5nLGcuZXhwb3J0cz1oLmV4cG9ydHN9cmV0dXJuIGcuZXhwb3J0c31hLm1vZHVsZXM9e30sYS5hbGlhc2VzPXt9LGEucmVzb2x2ZT1mdW5jdGlvbihiKXsiLyI9PT1iLmNoYXJBdCgwKSYmKGI9Yi5zbGljZSgxKSk7Zm9yKHZhciBjPVtiLGIrIi5qcyIsYisiLmpzb24iLGIrIi9pbmRleC5qcyIsYisiL2luZGV4Lmpzb24iXSxkPTA7ZDxjLmxlbmd0aDtkKyspe3ZhciBiPWNbZF07aWYoYS5tb2R1bGVzLmhhc093blByb3BlcnR5KGIpKXJldHVybiBiO2lmKGEuYWxpYXNlcy5oYXNPd25Qcm9wZXJ0eShiKSlyZXR1cm4gYS5hbGlhc2VzW2JdfX0sYS5ub3JtYWxpemU9ZnVuY3Rpb24oYSxiKXt2YXIgYz1bXTtpZigiLiIhPWIuY2hhckF0KDApKXJldHVybiBiO2E9YS5zcGxpdCgiLyIpLGI9Yi5zcGxpdCgiLyIpO2Zvcih2YXIgZD0wO2Q8Yi5sZW5ndGg7KytkKSIuLiI9PWJbZF0/YS5wb3AoKToiLiIhPWJbZF0mJiIiIT1iW2RdJiZjLnB1c2goYltkXSk7cmV0dXJuIGEuY29uY2F0KGMpLmpvaW4oIi8iKX0sYS5yZWdpc3Rlcj1mdW5jdGlvbihiLGMpe2EubW9kdWxlc1tiXT1jfSxhLmFsaWFzPWZ1bmN0aW9uKGIsYyl7aWYoIWEubW9kdWxlcy5oYXNPd25Qcm9wZXJ0eShiKSl0aHJvdyBuZXcgRXJyb3IoJ0ZhaWxlZCB0byBhbGlhcyAiJytiKyciLCBpdCBkb2VzIG5vdCBleGlzdCcpO2EuYWxpYXNlc1tjXT1ifSxhLnJlbGF0aXZlPWZ1bmN0aW9uKGIpe2Z1bmN0aW9uIGMoYSxiKXtmb3IodmFyIGM9YS5sZW5ndGg7Yy0tOylpZihhW2NdPT09YilyZXR1cm4gYztyZXR1cm4tMX1mdW5jdGlvbiBkKGMpe3ZhciBlPWQucmVzb2x2ZShjKTtyZXR1cm4gYShlLGIsYyl9dmFyIGU9YS5ub3JtYWxpemUoYiwiLi4iKTtyZXR1cm4gZC5yZXNvbHZlPWZ1bmN0aW9uKGQpe3ZhciBmPWQuY2hhckF0KDApO2lmKCIvIj09ZilyZXR1cm4gZC5zbGljZSgxKTtpZigiLiI9PWYpcmV0dXJuIGEubm9ybWFsaXplKGUsZCk7dmFyIGc9Yi5zcGxpdCgiLyIpLGg9YyhnLCJkZXBzIikrMTtyZXR1cm4gaHx8KGg9MCksZD1nLnNsaWNlKDAsaCsxKS5qb2luKCIvIikrIi9kZXBzLyIrZH0sZC5leGlzdHM9ZnVuY3Rpb24oYil7cmV0dXJuIGEubW9kdWxlcy5oYXNPd25Qcm9wZXJ0eShkLnJlc29sdmUoYikpfSxkfSxhLnJlZ2lzdGVyKCJjb21wb25lbnQtZW1pdHRlci9pbmRleC5qcyIsZnVuY3Rpb24oYSxiLGMpe2Z1bmN0aW9uIGQoYSl7cmV0dXJuIGE/ZShhKTp2b2lkIDB9ZnVuY3Rpb24gZShhKXtmb3IodmFyIGIgaW4gZC5wcm90b3R5cGUpYVtiXT1kLnByb3RvdHlwZVtiXTtyZXR1cm4gYX1jLmV4cG9ydHM9ZCxkLnByb3RvdHlwZS5vbj1kLnByb3RvdHlwZS5hZGRFdmVudExpc3RlbmVyPWZ1bmN0aW9uKGEsYil7cmV0dXJuIHRoaXMuX2NhbGxiYWNrcz10aGlzLl9jYWxsYmFja3N8fHt9LCh0aGlzLl9jYWxsYmFja3NbYV09dGhpcy5fY2FsbGJhY2tzW2FdfHxbXSkucHVzaChiKSx0aGlzfSxkLnByb3RvdHlwZS5vbmNlPWZ1bmN0aW9uKGEsYil7ZnVuY3Rpb24gYygpe2Qub2ZmKGEsYyksYi5hcHBseSh0aGlzLGFyZ3VtZW50cyl9dmFyIGQ9dGhpcztyZXR1cm4gdGhpcy5fY2FsbGJhY2tzPXRoaXMuX2NhbGxiYWNrc3x8e30sYy5mbj1iLHRoaXMub24oYSxjKSx0aGlzfSxkLnByb3RvdHlwZS5vZmY9ZC5wcm90b3R5cGUucmVtb3ZlTGlzdGVuZXI9ZC5wcm90b3R5cGUucmVtb3ZlQWxsTGlzdGVuZXJzPWQucHJvdG90eXBlLnJlbW92ZUV2ZW50TGlzdGVuZXI9ZnVuY3Rpb24oYSxiKXtpZih0aGlzLl9jYWxsYmFja3M9dGhpcy5fY2FsbGJhY2tzfHx7fSwwPT1hcmd1bWVudHMubGVuZ3RoKXJldHVybiB0aGlzLl9jYWxsYmFja3M9e30sdGhpczt2YXIgYz10aGlzLl9jYWxsYmFja3NbYV07aWYoIWMpcmV0dXJuIHRoaXM7aWYoMT09YXJndW1lbnRzLmxlbmd0aClyZXR1cm4gZGVsZXRlIHRoaXMuX2NhbGxiYWNrc1thXSx0aGlzO2Zvcih2YXIgZCxlPTA7ZTxjLmxlbmd0aDtlKyspaWYoZD1jW2VdLGQ9PT1ifHxkLmZuPT09Yil7Yy5zcGxpY2UoZSwxKTticmVha31yZXR1cm4gdGhpc30sZC5wcm90b3R5cGUuZW1pdD1mdW5jdGlvbihhKXt0aGlzLl9jYWxsYmFja3M9dGhpcy5fY2FsbGJhY2tzfHx7fTt2YXIgYj1bXS5zbGljZS5jYWxsKGFyZ3VtZW50cywxKSxjPXRoaXMuX2NhbGxiYWNrc1thXTtpZihjKXtjPWMuc2xpY2UoMCk7Zm9yKHZhciBkPTAsZT1jLmxlbmd0aDtlPmQ7KytkKWNbZF0uYXBwbHkodGhpcyxiKX1yZXR1cm4gdGhpc30sZC5wcm90b3R5cGUubGlzdGVuZXJzPWZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLl9jYWxsYmFja3M9dGhpcy5fY2FsbGJhY2tzfHx7fSx0aGlzLl9jYWxsYmFja3NbYV18fFtdfSxkLnByb3RvdHlwZS5oYXNMaXN0ZW5lcnM9ZnVuY3Rpb24oYSl7cmV0dXJuISF0aGlzLmxpc3RlbmVycyhhKS5sZW5ndGh9fSksYS5yZWdpc3RlcigiZHJvcHpvbmUvaW5kZXguanMiLGZ1bmN0aW9uKGEsYixjKXtjLmV4cG9ydHM9YigiLi9saWIvZHJvcHpvbmUuanMiKX0pLGEucmVnaXN0ZXIoImRyb3B6b25lL2xpYi9kcm9wem9uZS5qcyIsZnVuY3Rpb24oYSxiLGMpeyhmdW5jdGlvbigpe3ZhciBhLGQsZSxmLGcsaCxpLGosaz17fS5oYXNPd25Qcm9wZXJ0eSxsPWZ1bmN0aW9uKGEsYil7ZnVuY3Rpb24gYygpe3RoaXMuY29uc3RydWN0b3I9YX1mb3IodmFyIGQgaW4gYilrLmNhbGwoYixkKSYmKGFbZF09YltkXSk7cmV0dXJuIGMucHJvdG90eXBlPWIucHJvdG90eXBlLGEucHJvdG90eXBlPW5ldyBjLGEuX19zdXBlcl9fPWIucHJvdG90eXBlLGF9LG09W10uc2xpY2U7ZD0idW5kZWZpbmVkIiE9dHlwZW9mIEVtaXR0ZXImJm51bGwhPT1FbWl0dGVyP0VtaXR0ZXI6YigiZW1pdHRlciIpLGk9ZnVuY3Rpb24oKXt9LGE9ZnVuY3Rpb24oYSl7ZnVuY3Rpb24gYihhLGQpe3ZhciBlLGYsZztpZih0aGlzLmVsZW1lbnQ9YSx0aGlzLnZlcnNpb249Yi52ZXJzaW9uLHRoaXMuZGVmYXVsdE9wdGlvbnMucHJldmlld1RlbXBsYXRlPXRoaXMuZGVmYXVsdE9wdGlvbnMucHJldmlld1RlbXBsYXRlLnJlcGxhY2UoL1xuKi9nLCIiKSx0aGlzLmNsaWNrYWJsZUVsZW1lbnRzPVtdLHRoaXMubGlzdGVuZXJzPVtdLHRoaXMuZmlsZXM9W10sInN0cmluZyI9PXR5cGVvZiB0aGlzLmVsZW1lbnQmJih0aGlzLmVsZW1lbnQ9ZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0aGlzLmVsZW1lbnQpKSwhdGhpcy5lbGVtZW50fHxudWxsPT10aGlzLmVsZW1lbnQubm9kZVR5cGUpdGhyb3cgbmV3IEVycm9yKCJJbnZhbGlkIGRyb3B6b25lIGVsZW1lbnQuIik7aWYodGhpcy5lbGVtZW50LmRyb3B6b25lKXRocm93IG5ldyBFcnJvcigiRHJvcHpvbmUgYWxyZWFkeSBhdHRhY2hlZC4iKTtpZihiLmluc3RhbmNlcy5wdXNoKHRoaXMpLHRoaXMuZWxlbWVudC5kcm9wem9uZT10aGlzLGU9bnVsbCE9KGc9Yi5vcHRpb25zRm9yRWxlbWVudCh0aGlzLmVsZW1lbnQpKT9nOnt9LHRoaXMub3B0aW9ucz1jKHt9LHRoaXMuZGVmYXVsdE9wdGlvbnMsZSxudWxsIT1kP2Q6e30pLHRoaXMub3B0aW9ucy5mb3JjZUZhbGxiYWNrfHwhYi5pc0Jyb3dzZXJTdXBwb3J0ZWQoKSlyZXR1cm4gdGhpcy5vcHRpb25zLmZhbGxiYWNrLmNhbGwodGhpcyk7aWYobnVsbD09dGhpcy5vcHRpb25zLnVybCYmKHRoaXMub3B0aW9ucy51cmw9dGhpcy5lbGVtZW50LmdldEF0dHJpYnV0ZSgiYWN0aW9uIikpLCF0aGlzLm9wdGlvbnMudXJsKXRocm93IG5ldyBFcnJvcigiTm8gVVJMIHByb3ZpZGVkLiIpO2lmKHRoaXMub3B0aW9ucy5hY2NlcHRlZEZpbGVzJiZ0aGlzLm9wdGlvbnMuYWNjZXB0ZWRNaW1lVHlwZXMpdGhyb3cgbmV3IEVycm9yKCJZb3UgY2FuJ3QgcHJvdmlkZSBib3RoICdhY2NlcHRlZEZpbGVzJyBhbmQgJ2FjY2VwdGVkTWltZVR5cGVzJy4gJ2FjY2VwdGVkTWltZVR5cGVzJyBpcyBkZXByZWNhdGVkLiIpO3RoaXMub3B0aW9ucy5hY2NlcHRlZE1pbWVUeXBlcyYmKHRoaXMub3B0aW9ucy5hY2NlcHRlZEZpbGVzPXRoaXMub3B0aW9ucy5hY2NlcHRlZE1pbWVUeXBlcyxkZWxldGUgdGhpcy5vcHRpb25zLmFjY2VwdGVkTWltZVR5cGVzKSx0aGlzLm9wdGlvbnMubWV0aG9kPXRoaXMub3B0aW9ucy5tZXRob2QudG9VcHBlckNhc2UoKSwoZj10aGlzLmdldEV4aXN0aW5nRmFsbGJhY2soKSkmJmYucGFyZW50Tm9kZSYmZi5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGYpLHRoaXMucHJldmlld3NDb250YWluZXI9dGhpcy5vcHRpb25zLnByZXZpZXdzQ29udGFpbmVyP2IuZ2V0RWxlbWVudCh0aGlzLm9wdGlvbnMucHJldmlld3NDb250YWluZXIsInByZXZpZXdzQ29udGFpbmVyIik6dGhpcy5lbGVtZW50LHRoaXMub3B0aW9ucy5jbGlja2FibGUmJih0aGlzLmNsaWNrYWJsZUVsZW1lbnRzPXRoaXMub3B0aW9ucy5jbGlja2FibGU9PT0hMD9bdGhpcy5lbGVtZW50XTpiLmdldEVsZW1lbnRzKHRoaXMub3B0aW9ucy5jbGlja2FibGUsImNsaWNrYWJsZSIpKSx0aGlzLmluaXQoKX12YXIgYztyZXR1cm4gbChiLGEpLGIucHJvdG90eXBlLmV2ZW50cz1bImRyb3AiLCJkcmFnc3RhcnQiLCJkcmFnZW5kIiwiZHJhZ2VudGVyIiwiZHJhZ292ZXIiLCJkcmFnbGVhdmUiLCJhZGRlZGZpbGUiLCJyZW1vdmVkZmlsZSIsInRodW1ibmFpbCIsImVycm9yIiwiZXJyb3JtdWx0aXBsZSIsInByb2Nlc3NpbmciLCJwcm9jZXNzaW5nbXVsdGlwbGUiLCJ1cGxvYWRwcm9ncmVzcyIsInRvdGFsdXBsb2FkcHJvZ3Jlc3MiLCJzZW5kaW5nIiwic2VuZGluZ211bHRpcGxlIiwic3VjY2VzcyIsInN1Y2Nlc3NtdWx0aXBsZSIsImNhbmNlbGVkIiwiY2FuY2VsZWRtdWx0aXBsZSIsImNvbXBsZXRlIiwiY29tcGxldGVtdWx0aXBsZSIsInJlc2V0IiwibWF4ZmlsZXNleGNlZWRlZCIsIm1heGZpbGVzcmVhY2hlZCJdLGIucHJvdG90eXBlLmRlZmF1bHRPcHRpb25zPXt1cmw6bnVsbCxtZXRob2Q6InBvc3QiLHdpdGhDcmVkZW50aWFsczohMSxwYXJhbGxlbFVwbG9hZHM6Mix1cGxvYWRNdWx0aXBsZTohMSxtYXhGaWxlc2l6ZToyNTYscGFyYW1OYW1lOiJmaWxlIixjcmVhdGVJbWFnZVRodW1ibmFpbHM6ITAsbWF4VGh1bWJuYWlsRmlsZXNpemU6MTAsdGh1bWJuYWlsV2lkdGg6MTAwLHRodW1ibmFpbEhlaWdodDoxMDAsbWF4RmlsZXM6bnVsbCxwYXJhbXM6e30sY2xpY2thYmxlOiEwLGlnbm9yZUhpZGRlbkZpbGVzOiEwLGFjY2VwdGVkRmlsZXM6bnVsbCxhY2NlcHRlZE1pbWVUeXBlczpudWxsLGF1dG9Qcm9jZXNzUXVldWU6ITAsYWRkUmVtb3ZlTGlua3M6ITEscHJldmlld3NDb250YWluZXI6bnVsbCxkaWN0RGVmYXVsdE1lc3NhZ2U6IkRyb3AgZmlsZXMgaGVyZSB0byB1cGxvYWQiLGRpY3RGYWxsYmFja01lc3NhZ2U6IllvdXIgYnJvd3NlciBkb2VzIG5vdCBzdXBwb3J0IGRyYWcnbidkcm9wIGZpbGUgdXBsb2Fkcy4iLGRpY3RGYWxsYmFja1RleHQ6IlBsZWFzZSB1c2UgdGhlIGZhbGxiYWNrIGZvcm0gYmVsb3cgdG8gdXBsb2FkIHlvdXIgZmlsZXMgbGlrZSBpbiB0aGUgb2xkZW4gZGF5cy4iLGRpY3RGaWxlVG9vQmlnOiJGaWxlIGlzIHRvbyBiaWcgKHt7ZmlsZXNpemV9fU1pQikuIE1heCBmaWxlc2l6ZToge3ttYXhGaWxlc2l6ZX19TWlCLiIsZGljdEludmFsaWRGaWxlVHlwZToiWW91IGNhbid0IHVwbG9hZCBmaWxlcyBvZiB0aGlzIHR5cGUuIixkaWN0UmVzcG9uc2VFcnJvcjoiU2VydmVyIHJlc3BvbmRlZCB3aXRoIHt7c3RhdHVzQ29kZX19IGNvZGUuIixkaWN0Q2FuY2VsVXBsb2FkOiJDYW5jZWwgdXBsb2FkIixkaWN0Q2FuY2VsVXBsb2FkQ29uZmlybWF0aW9uOiJBcmUgeW91IHN1cmUgeW91IHdhbnQgdG8gY2FuY2VsIHRoaXMgdXBsb2FkPyIsZGljdFJlbW92ZUZpbGU6IlJlbW92ZSBmaWxlIixkaWN0UmVtb3ZlRmlsZUNvbmZpcm1hdGlvbjpudWxsLGRpY3RNYXhGaWxlc0V4Y2VlZGVkOiJZb3UgY2FuIG5vdCB1cGxvYWQgYW55IG1vcmUgZmlsZXMuIixhY2NlcHQ6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gYigpfSxpbml0OmZ1bmN0aW9uKCl7cmV0dXJuIGl9LGZvcmNlRmFsbGJhY2s6ITEsZmFsbGJhY2s6ZnVuY3Rpb24oKXt2YXIgYSxjLGQsZSxmLGc7Zm9yKHRoaXMuZWxlbWVudC5jbGFzc05hbWU9IiIrdGhpcy5lbGVtZW50LmNsYXNzTmFtZSsiIGR6LWJyb3dzZXItbm90LXN1cHBvcnRlZCIsZz10aGlzLmVsZW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoImRpdiIpLGU9MCxmPWcubGVuZ3RoO2Y+ZTtlKyspYT1nW2VdLC8oXnwgKWR6LW1lc3NhZ2UoJHwgKS8udGVzdChhLmNsYXNzTmFtZSkmJihjPWEsYS5jbGFzc05hbWU9ImR6LW1lc3NhZ2UiKTtyZXR1cm4gY3x8KGM9Yi5jcmVhdGVFbGVtZW50KCc8ZGl2IGNsYXNzPSJkei1tZXNzYWdlIj48c3Bhbj48L3NwYW4+PC9kaXY+JyksdGhpcy5lbGVtZW50LmFwcGVuZENoaWxkKGMpKSxkPWMuZ2V0RWxlbWVudHNCeVRhZ05hbWUoInNwYW4iKVswXSxkJiYoZC50ZXh0Q29udGVudD10aGlzLm9wdGlvbnMuZGljdEZhbGxiYWNrTWVzc2FnZSksdGhpcy5lbGVtZW50LmFwcGVuZENoaWxkKHRoaXMuZ2V0RmFsbGJhY2tGb3JtKCkpfSxyZXNpemU6ZnVuY3Rpb24oYSl7dmFyIGIsYyxkO3JldHVybiBiPXtzcmNYOjAsc3JjWTowLHNyY1dpZHRoOmEud2lkdGgsc3JjSGVpZ2h0OmEuaGVpZ2h0fSxjPWEud2lkdGgvYS5oZWlnaHQsZD10aGlzLm9wdGlvbnMudGh1bWJuYWlsV2lkdGgvdGhpcy5vcHRpb25zLnRodW1ibmFpbEhlaWdodCxhLmhlaWdodDx0aGlzLm9wdGlvbnMudGh1bWJuYWlsSGVpZ2h0fHxhLndpZHRoPHRoaXMub3B0aW9ucy50aHVtYm5haWxXaWR0aD8oYi50cmdIZWlnaHQ9Yi5zcmNIZWlnaHQsYi50cmdXaWR0aD1iLnNyY1dpZHRoKTpjPmQ/KGIuc3JjSGVpZ2h0PWEuaGVpZ2h0LGIuc3JjV2lkdGg9Yi5zcmNIZWlnaHQqZCk6KGIuc3JjV2lkdGg9YS53aWR0aCxiLnNyY0hlaWdodD1iLnNyY1dpZHRoL2QpLGIuc3JjWD0oYS53aWR0aC1iLnNyY1dpZHRoKS8yLGIuc3JjWT0oYS5oZWlnaHQtYi5zcmNIZWlnaHQpLzIsYn0sZHJvcDpmdW5jdGlvbigpe3JldHVybiB0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgiZHotZHJhZy1ob3ZlciIpfSxkcmFnc3RhcnQ6aSxkcmFnZW5kOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKCJkei1kcmFnLWhvdmVyIil9LGRyYWdlbnRlcjpmdW5jdGlvbigpe3JldHVybiB0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LmFkZCgiZHotZHJhZy1ob3ZlciIpfSxkcmFnb3ZlcjpmdW5jdGlvbigpe3JldHVybiB0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LmFkZCgiZHotZHJhZy1ob3ZlciIpfSxkcmFnbGVhdmU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoImR6LWRyYWctaG92ZXIiKX0scGFzdGU6aSxyZXNldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgiZHotc3RhcnRlZCIpfSxhZGRlZGZpbGU6ZnVuY3Rpb24oYSl7dmFyIGMsZCxlLGYsZyxoLGksaixrLGwsbSxuLG8scD10aGlzO2Zvcih0aGlzLmVsZW1lbnQ9PT10aGlzLnByZXZpZXdzQ29udGFpbmVyJiZ0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LmFkZCgiZHotc3RhcnRlZCIpLGEucHJldmlld0VsZW1lbnQ9Yi5jcmVhdGVFbGVtZW50KHRoaXMub3B0aW9ucy5wcmV2aWV3VGVtcGxhdGUudHJpbSgpKSxhLnByZXZpZXdUZW1wbGF0ZT1hLnByZXZpZXdFbGVtZW50LHRoaXMucHJldmlld3NDb250YWluZXIuYXBwZW5kQ2hpbGQoYS5wcmV2aWV3RWxlbWVudCksbD1hLnByZXZpZXdFbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoIltkYXRhLWR6LW5hbWVdIiksZj0wLGk9bC5sZW5ndGg7aT5mO2YrKyljPWxbZl0sYy50ZXh0Q29udGVudD1hLm5hbWU7Zm9yKG09YS5wcmV2aWV3RWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKCJbZGF0YS1kei1zaXplXSIpLGc9MCxqPW0ubGVuZ3RoO2o+ZztnKyspYz1tW2ddLGMuaW5uZXJIVE1MPXRoaXMuZmlsZXNpemUoYS5zaXplKTtmb3IodGhpcy5vcHRpb25zLmFkZFJlbW92ZUxpbmtzJiYoYS5fcmVtb3ZlTGluaz1iLmNyZWF0ZUVsZW1lbnQoJzxhIGNsYXNzPSJkei1yZW1vdmUiIGhyZWY9ImphdmFzY3JpcHQ6dW5kZWZpbmVkOyIgZGF0YS1kei1yZW1vdmU+Jyt0aGlzLm9wdGlvbnMuZGljdFJlbW92ZUZpbGUrIjwvYT4iKSxhLnByZXZpZXdFbGVtZW50LmFwcGVuZENoaWxkKGEuX3JlbW92ZUxpbmspKSxkPWZ1bmN0aW9uKGMpe3JldHVybiBjLnByZXZlbnREZWZhdWx0KCksYy5zdG9wUHJvcGFnYXRpb24oKSxhLnN0YXR1cz09PWIuVVBMT0FESU5HP2IuY29uZmlybShwLm9wdGlvbnMuZGljdENhbmNlbFVwbG9hZENvbmZpcm1hdGlvbixmdW5jdGlvbigpe3JldHVybiBwLnJlbW92ZUZpbGUoYSl9KTpwLm9wdGlvbnMuZGljdFJlbW92ZUZpbGVDb25maXJtYXRpb24/Yi5jb25maXJtKHAub3B0aW9ucy5kaWN0UmVtb3ZlRmlsZUNvbmZpcm1hdGlvbixmdW5jdGlvbigpe3JldHVybiBwLnJlbW92ZUZpbGUoYSl9KTpwLnJlbW92ZUZpbGUoYSl9LG49YS5wcmV2aWV3RWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKCJbZGF0YS1kei1yZW1vdmVdIiksbz1bXSxoPTAsaz1uLmxlbmd0aDtrPmg7aCsrKWU9bltoXSxvLnB1c2goZS5hZGRFdmVudExpc3RlbmVyKCJjbGljayIsZCkpO3JldHVybiBvfSxyZW1vdmVkZmlsZTpmdW5jdGlvbihhKXt2YXIgYjtyZXR1cm4gbnVsbCE9KGI9YS5wcmV2aWV3RWxlbWVudCkmJmIucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChhLnByZXZpZXdFbGVtZW50KSx0aGlzLl91cGRhdGVNYXhGaWxlc1JlYWNoZWRDbGFzcygpfSx0aHVtYm5haWw6ZnVuY3Rpb24oYSxiKXt2YXIgYyxkLGUsZixnO2ZvcihhLnByZXZpZXdFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoImR6LWZpbGUtcHJldmlldyIpLGEucHJldmlld0VsZW1lbnQuY2xhc3NMaXN0LmFkZCgiZHotaW1hZ2UtcHJldmlldyIpLGY9YS5wcmV2aWV3RWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKCJbZGF0YS1kei10aHVtYm5haWxdIiksZz1bXSxkPTAsZT1mLmxlbmd0aDtlPmQ7ZCsrKWM9ZltkXSxjLmFsdD1hLm5hbWUsZy5wdXNoKGMuc3JjPWIpO3JldHVybiBnfSxlcnJvcjpmdW5jdGlvbihhLGIpe3ZhciBjLGQsZSxmLGc7Zm9yKGEucHJldmlld0VsZW1lbnQuY2xhc3NMaXN0LmFkZCgiZHotZXJyb3IiKSwiU3RyaW5nIiE9dHlwZW9mIGImJmIuZXJyb3ImJihiPWIuZXJyb3IpLGY9YS5wcmV2aWV3RWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKCJbZGF0YS1kei1lcnJvcm1lc3NhZ2VdIiksZz1bXSxkPTAsZT1mLmxlbmd0aDtlPmQ7ZCsrKWM9ZltkXSxnLnB1c2goYy50ZXh0Q29udGVudD1iKTtyZXR1cm4gZ30sZXJyb3JtdWx0aXBsZTppLHByb2Nlc3Npbmc6ZnVuY3Rpb24oYSl7cmV0dXJuIGEucHJldmlld0VsZW1lbnQuY2xhc3NMaXN0LmFkZCgiZHotcHJvY2Vzc2luZyIpLGEuX3JlbW92ZUxpbms/YS5fcmVtb3ZlTGluay50ZXh0Q29udGVudD10aGlzLm9wdGlvbnMuZGljdENhbmNlbFVwbG9hZDp2b2lkIDB9LHByb2Nlc3NpbmdtdWx0aXBsZTppLHVwbG9hZHByb2dyZXNzOmZ1bmN0aW9uKGEsYil7dmFyIGMsZCxlLGYsZztmb3IoZj1hLnByZXZpZXdFbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoIltkYXRhLWR6LXVwbG9hZHByb2dyZXNzXSIpLGc9W10sZD0wLGU9Zi5sZW5ndGg7ZT5kO2QrKyljPWZbZF0sZy5wdXNoKGMuc3R5bGUud2lkdGg9IiIrYisiJSIpO3JldHVybiBnfSx0b3RhbHVwbG9hZHByb2dyZXNzOmksc2VuZGluZzppLHNlbmRpbmdtdWx0aXBsZTppLHN1Y2Nlc3M6ZnVuY3Rpb24oYSl7cmV0dXJuIGEucHJldmlld0VsZW1lbnQuY2xhc3NMaXN0LmFkZCgiZHotc3VjY2VzcyIpfSxzdWNjZXNzbXVsdGlwbGU6aSxjYW5jZWxlZDpmdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5lbWl0KCJlcnJvciIsYSwiVXBsb2FkIGNhbmNlbGVkLiIpfSxjYW5jZWxlZG11bHRpcGxlOmksY29tcGxldGU6ZnVuY3Rpb24oYSl7cmV0dXJuIGEuX3JlbW92ZUxpbms/YS5fcmVtb3ZlTGluay50ZXh0Q29udGVudD10aGlzLm9wdGlvbnMuZGljdFJlbW92ZUZpbGU6dm9pZCAwfSxjb21wbGV0ZW11bHRpcGxlOmksbWF4ZmlsZXNleGNlZWRlZDppLG1heGZpbGVzcmVhY2hlZDppLHByZXZpZXdUZW1wbGF0ZTonPGRpdiBjbGFzcz0iZHotcHJldmlldyBkei1maWxlLXByZXZpZXciPlxuICA8ZGl2IGNsYXNzPSJkei1kZXRhaWxzIj5cbiAgICA8ZGl2IGNsYXNzPSJkei1maWxlbmFtZSI+PHNwYW4gZGF0YS1kei1uYW1lPjwvc3Bhbj48L2Rpdj5cbiAgICA8ZGl2IGNsYXNzPSJkei1zaXplIiBkYXRhLWR6LXNpemU+PC9kaXY+XG4gICAgPGltZyBkYXRhLWR6LXRodW1ibmFpbCAvPlxuICA8L2Rpdj5cbiAgPGRpdiBjbGFzcz0iZHotcHJvZ3Jlc3MiPjxzcGFuIGNsYXNzPSJkei11cGxvYWQiIGRhdGEtZHotdXBsb2FkcHJvZ3Jlc3M+PC9zcGFuPjwvZGl2PlxuICA8ZGl2IGNsYXNzPSJkei1zdWNjZXNzLW1hcmsiPjxzcGFuPiYjMTAwMDQ7PC9zcGFuPjwvZGl2PlxuICA8ZGl2IGNsYXNzPSJkei1lcnJvci1tYXJrIj48c3Bhbj4mIzEwMDA4Ozwvc3Bhbj48L2Rpdj5cbiAgPGRpdiBjbGFzcz0iZHotZXJyb3ItbWVzc2FnZSI+PHNwYW4gZGF0YS1kei1lcnJvcm1lc3NhZ2U+PC9zcGFuPjwvZGl2PlxuPC9kaXY+J30sYz1mdW5jdGlvbigpe3ZhciBhLGIsYyxkLGUsZixnO2ZvcihkPWFyZ3VtZW50c1swXSxjPTI8PWFyZ3VtZW50cy5sZW5ndGg/bS5jYWxsKGFyZ3VtZW50cywxKTpbXSxmPTAsZz1jLmxlbmd0aDtnPmY7ZisrKXtiPWNbZl07Zm9yKGEgaW4gYillPWJbYV0sZFthXT1lfXJldHVybiBkfSxiLnByb3RvdHlwZS5nZXRBY2NlcHRlZEZpbGVzPWZ1bmN0aW9uKCl7dmFyIGEsYixjLGQsZTtmb3IoZD10aGlzLmZpbGVzLGU9W10sYj0wLGM9ZC5sZW5ndGg7Yz5iO2IrKylhPWRbYl0sYS5hY2NlcHRlZCYmZS5wdXNoKGEpO3JldHVybiBlfSxiLnByb3RvdHlwZS5nZXRSZWplY3RlZEZpbGVzPWZ1bmN0aW9uKCl7dmFyIGEsYixjLGQsZTtmb3IoZD10aGlzLmZpbGVzLGU9W10sYj0wLGM9ZC5sZW5ndGg7Yz5iO2IrKylhPWRbYl0sYS5hY2NlcHRlZHx8ZS5wdXNoKGEpO3JldHVybiBlfSxiLnByb3RvdHlwZS5nZXRRdWV1ZWRGaWxlcz1mdW5jdGlvbigpe3ZhciBhLGMsZCxlLGY7Zm9yKGU9dGhpcy5maWxlcyxmPVtdLGM9MCxkPWUubGVuZ3RoO2Q+YztjKyspYT1lW2NdLGEuc3RhdHVzPT09Yi5RVUVVRUQmJmYucHVzaChhKTtyZXR1cm4gZn0sYi5wcm90b3R5cGUuZ2V0VXBsb2FkaW5nRmlsZXM9ZnVuY3Rpb24oKXt2YXIgYSxjLGQsZSxmO2ZvcihlPXRoaXMuZmlsZXMsZj1bXSxjPTAsZD1lLmxlbmd0aDtkPmM7YysrKWE9ZVtjXSxhLnN0YXR1cz09PWIuVVBMT0FESU5HJiZmLnB1c2goYSk7cmV0dXJuIGZ9LGIucHJvdG90eXBlLmluaXQ9ZnVuY3Rpb24oKXt2YXIgYSxjLGQsZSxmLGcsaCxpPXRoaXM7Zm9yKCJmb3JtIj09PXRoaXMuZWxlbWVudC50YWdOYW1lJiZ0aGlzLmVsZW1lbnQuc2V0QXR0cmlidXRlKCJlbmN0eXBlIiwibXVsdGlwYXJ0L2Zvcm0tZGF0YSIpLHRoaXMuZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoImRyb3B6b25lIikmJiF0aGlzLmVsZW1lbnQucXVlcnlTZWxlY3RvcigiLmR6LW1lc3NhZ2UiKSYmdGhpcy5lbGVtZW50LmFwcGVuZENoaWxkKGIuY3JlYXRlRWxlbWVudCgnPGRpdiBjbGFzcz0iZHotZGVmYXVsdCBkei1tZXNzYWdlIj48c3Bhbj4nK3RoaXMub3B0aW9ucy5kaWN0RGVmYXVsdE1lc3NhZ2UrIjwvc3Bhbj48L2Rpdj4iKSksdGhpcy5jbGlja2FibGVFbGVtZW50cy5sZW5ndGgmJihkPWZ1bmN0aW9uKCl7cmV0dXJuIGkuaGlkZGVuRmlsZUlucHV0JiZkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKGkuaGlkZGVuRmlsZUlucHV0KSxpLmhpZGRlbkZpbGVJbnB1dD1kb2N1bWVudC5jcmVhdGVFbGVtZW50KCJpbnB1dCIpLGkuaGlkZGVuRmlsZUlucHV0LnNldEF0dHJpYnV0ZSgidHlwZSIsImZpbGUiKSwobnVsbD09aS5vcHRpb25zLm1heEZpbGVzfHxpLm9wdGlvbnMubWF4RmlsZXM+MSkmJmkuaGlkZGVuRmlsZUlucHV0LnNldEF0dHJpYnV0ZSgibXVsdGlwbGUiLCJtdWx0aXBsZSIpLG51bGwhPWkub3B0aW9ucy5hY2NlcHRlZEZpbGVzJiZpLmhpZGRlbkZpbGVJbnB1dC5zZXRBdHRyaWJ1dGUoImFjY2VwdCIsaS5vcHRpb25zLmFjY2VwdGVkRmlsZXMpLGkuaGlkZGVuRmlsZUlucHV0LnN0eWxlLnZpc2liaWxpdHk9ImhpZGRlbiIsaS5oaWRkZW5GaWxlSW5wdXQuc3R5bGUucG9zaXRpb249ImFic29sdXRlIixpLmhpZGRlbkZpbGVJbnB1dC5zdHlsZS50b3A9IjAiLGkuaGlkZGVuRmlsZUlucHV0LnN0eWxlLmxlZnQ9IjAiLGkuaGlkZGVuRmlsZUlucHV0LnN0eWxlLmhlaWdodD0iMCIsaS5oaWRkZW5GaWxlSW5wdXQuc3R5bGUud2lkdGg9IjAiLGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoaS5oaWRkZW5GaWxlSW5wdXQpLGkuaGlkZGVuRmlsZUlucHV0LmFkZEV2ZW50TGlzdGVuZXIoImNoYW5nZSIsZnVuY3Rpb24oKXt2YXIgYSxiLGMsZTtpZihiPWkuaGlkZGVuRmlsZUlucHV0LmZpbGVzLGIubGVuZ3RoKWZvcihjPTAsZT1iLmxlbmd0aDtlPmM7YysrKWE9YltjXSxpLmFkZEZpbGUoYSk7cmV0dXJuIGQoKX0pfSxkKCkpLHRoaXMuVVJMPW51bGwhPShnPXdpbmRvdy5VUkwpP2c6d2luZG93LndlYmtpdFVSTCxoPXRoaXMuZXZlbnRzLGU9MCxmPWgubGVuZ3RoO2Y+ZTtlKyspYT1oW2VdLHRoaXMub24oYSx0aGlzLm9wdGlvbnNbYV0pO3JldHVybiB0aGlzLm9uKCJ1cGxvYWRwcm9ncmVzcyIsZnVuY3Rpb24oKXtyZXR1cm4gaS51cGRhdGVUb3RhbFVwbG9hZFByb2dyZXNzKCl9KSx0aGlzLm9uKCJyZW1vdmVkZmlsZSIsZnVuY3Rpb24oKXtyZXR1cm4gaS51cGRhdGVUb3RhbFVwbG9hZFByb2dyZXNzKCl9KSx0aGlzLm9uKCJjYW5jZWxlZCIsZnVuY3Rpb24oYSl7cmV0dXJuIGkuZW1pdCgiY29tcGxldGUiLGEpfSksdGhpcy5vbigiY29tcGxldGUiLGZ1bmN0aW9uKCl7cmV0dXJuIDA9PT1pLmdldFVwbG9hZGluZ0ZpbGVzKCkubGVuZ3RoJiYwPT09aS5nZXRRdWV1ZWRGaWxlcygpLmxlbmd0aD9zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7cmV0dXJuIGkuZW1pdCgicXVldWVjb21wbGV0ZSIpfSwwKTp2b2lkIDB9KSxjPWZ1bmN0aW9uKGEpe3JldHVybiBhLnN0b3BQcm9wYWdhdGlvbigpLGEucHJldmVudERlZmF1bHQ/YS5wcmV2ZW50RGVmYXVsdCgpOmEucmV0dXJuVmFsdWU9ITF9LHRoaXMubGlzdGVuZXJzPVt7ZWxlbWVudDp0aGlzLmVsZW1lbnQsZXZlbnRzOntkcmFnc3RhcnQ6ZnVuY3Rpb24oYSl7cmV0dXJuIGkuZW1pdCgiZHJhZ3N0YXJ0IixhKX0sZHJhZ2VudGVyOmZ1bmN0aW9uKGEpe3JldHVybiBjKGEpLGkuZW1pdCgiZHJhZ2VudGVyIixhKX0sZHJhZ292ZXI6ZnVuY3Rpb24oYSl7dmFyIGI7dHJ5e2I9YS5kYXRhVHJhbnNmZXIuZWZmZWN0QWxsb3dlZH1jYXRjaChkKXt9cmV0dXJuIGEuZGF0YVRyYW5zZmVyLmRyb3BFZmZlY3Q9Im1vdmUiPT09Ynx8ImxpbmtNb3ZlIj09PWI/Im1vdmUiOiJjb3B5IixjKGEpLGkuZW1pdCgiZHJhZ292ZXIiLGEpfSxkcmFnbGVhdmU6ZnVuY3Rpb24oYSl7cmV0dXJuIGkuZW1pdCgiZHJhZ2xlYXZlIixhKX0sZHJvcDpmdW5jdGlvbihhKXtyZXR1cm4gYyhhKSxpLmRyb3AoYSl9LGRyYWdlbmQ6ZnVuY3Rpb24oYSl7cmV0dXJuIGkuZW1pdCgiZHJhZ2VuZCIsYSl9LHBhc3RlOmZ1bmN0aW9uKGEpe3JldHVybiBjKGEpLGkucGFzdGUoYSl9fX1dLHRoaXMuY2xpY2thYmxlRWxlbWVudHMuZm9yRWFjaChmdW5jdGlvbihhKXtyZXR1cm4gaS5saXN0ZW5lcnMucHVzaCh7ZWxlbWVudDphLGV2ZW50czp7Y2xpY2s6ZnVuY3Rpb24oYyl7cmV0dXJuIGEhPT1pLmVsZW1lbnR8fGMudGFyZ2V0PT09aS5lbGVtZW50fHxiLmVsZW1lbnRJbnNpZGUoYy50YXJnZXQsaS5lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoIi5kei1tZXNzYWdlIikpP2kuaGlkZGVuRmlsZUlucHV0LmNsaWNrKCk6dm9pZCAwfX19KX0pLHRoaXMuZW5hYmxlKCksdGhpcy5vcHRpb25zLmluaXQuY2FsbCh0aGlzKX0sYi5wcm90b3R5cGUuZGVzdHJveT1mdW5jdGlvbigpe3ZhciBhO3JldHVybiB0aGlzLmRpc2FibGUoKSx0aGlzLnJlbW92ZUFsbEZpbGVzKCEwKSwobnVsbCE9KGE9dGhpcy5oaWRkZW5GaWxlSW5wdXQpP2EucGFyZW50Tm9kZTp2b2lkIDApJiYodGhpcy5oaWRkZW5GaWxlSW5wdXQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLmhpZGRlbkZpbGVJbnB1dCksdGhpcy5oaWRkZW5GaWxlSW5wdXQ9bnVsbCksZGVsZXRlIHRoaXMuZWxlbWVudC5kcm9wem9uZSxiLmluc3RhbmNlcy5zcGxpY2UoYi5pbnN0YW5jZXMuaW5kZXhPZih0aGlzKSwxKX0sYi5wcm90b3R5cGUudXBkYXRlVG90YWxVcGxvYWRQcm9ncmVzcz1mdW5jdGlvbigpe3ZhciBhLGIsYyxkLGUsZixnLGg7aWYoZD0wLGM9MCxhPXRoaXMuZ2V0QWNjZXB0ZWRGaWxlcygpLGEubGVuZ3RoKXtmb3IoaD10aGlzLmdldEFjY2VwdGVkRmlsZXMoKSxmPTAsZz1oLmxlbmd0aDtnPmY7ZisrKWI9aFtmXSxkKz1iLnVwbG9hZC5ieXRlc1NlbnQsYys9Yi51cGxvYWQudG90YWw7ZT0xMDAqZC9jfWVsc2UgZT0xMDA7cmV0dXJuIHRoaXMuZW1pdCgidG90YWx1cGxvYWRwcm9ncmVzcyIsZSxjLGQpfSxiLnByb3RvdHlwZS5nZXRGYWxsYmFja0Zvcm09ZnVuY3Rpb24oKXt2YXIgYSxjLGQsZTtyZXR1cm4oYT10aGlzLmdldEV4aXN0aW5nRmFsbGJhY2soKSk/YTooZD0nPGRpdiBjbGFzcz0iZHotZmFsbGJhY2siPicsdGhpcy5vcHRpb25zLmRpY3RGYWxsYmFja1RleHQmJihkKz0iPHA+Iit0aGlzLm9wdGlvbnMuZGljdEZhbGxiYWNrVGV4dCsiPC9wPiIpLGQrPSc8aW5wdXQgdHlwZT0iZmlsZSIgbmFtZT0iJyt0aGlzLm9wdGlvbnMucGFyYW1OYW1lKyh0aGlzLm9wdGlvbnMudXBsb2FkTXVsdGlwbGU/IltdIjoiIikrJyIgJysodGhpcy5vcHRpb25zLnVwbG9hZE11bHRpcGxlPydtdWx0aXBsZT0ibXVsdGlwbGUiJzp2b2lkIDApKycgLz48aW5wdXQgdHlwZT0ic3VibWl0IiB2YWx1ZT0iVXBsb2FkISI+PC9kaXY+JyxjPWIuY3JlYXRlRWxlbWVudChkKSwiRk9STSIhPT10aGlzLmVsZW1lbnQudGFnTmFtZT8oZT1iLmNyZWF0ZUVsZW1lbnQoJzxmb3JtIGFjdGlvbj0iJyt0aGlzLm9wdGlvbnMudXJsKyciIGVuY3R5cGU9Im11bHRpcGFydC9mb3JtLWRhdGEiIG1ldGhvZD0iJyt0aGlzLm9wdGlvbnMubWV0aG9kKyciPjwvZm9ybT4nKSxlLmFwcGVuZENoaWxkKGMpKToodGhpcy5lbGVtZW50LnNldEF0dHJpYnV0ZSgiZW5jdHlwZSIsIm11bHRpcGFydC9mb3JtLWRhdGEiKSx0aGlzLmVsZW1lbnQuc2V0QXR0cmlidXRlKCJtZXRob2QiLHRoaXMub3B0aW9ucy5tZXRob2QpKSxudWxsIT1lP2U6Yyl9LGIucHJvdG90eXBlLmdldEV4aXN0aW5nRmFsbGJhY2s9ZnVuY3Rpb24oKXt2YXIgYSxiLGMsZCxlLGY7Zm9yKGI9ZnVuY3Rpb24oYSl7dmFyIGIsYyxkO2ZvcihjPTAsZD1hLmxlbmd0aDtkPmM7YysrKWlmKGI9YVtjXSwvKF58IClmYWxsYmFjaygkfCApLy50ZXN0KGIuY2xhc3NOYW1lKSlyZXR1cm4gYn0sZj1bImRpdiIsImZvcm0iXSxkPTAsZT1mLmxlbmd0aDtlPmQ7ZCsrKWlmKGM9ZltkXSxhPWIodGhpcy5lbGVtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKGMpKSlyZXR1cm4gYX0sYi5wcm90b3R5cGUuc2V0dXBFdmVudExpc3RlbmVycz1mdW5jdGlvbigpe3ZhciBhLGIsYyxkLGUsZixnO2ZvcihmPXRoaXMubGlzdGVuZXJzLGc9W10sZD0wLGU9Zi5sZW5ndGg7ZT5kO2QrKylhPWZbZF0sZy5wdXNoKGZ1bmN0aW9uKCl7dmFyIGQsZTtkPWEuZXZlbnRzLGU9W107Zm9yKGIgaW4gZCljPWRbYl0sZS5wdXNoKGEuZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKGIsYywhMSkpO3JldHVybiBlfSgpKTtyZXR1cm4gZ30sYi5wcm90b3R5cGUucmVtb3ZlRXZlbnRMaXN0ZW5lcnM9ZnVuY3Rpb24oKXt2YXIgYSxiLGMsZCxlLGYsZztmb3IoZj10aGlzLmxpc3RlbmVycyxnPVtdLGQ9MCxlPWYubGVuZ3RoO2U+ZDtkKyspYT1mW2RdLGcucHVzaChmdW5jdGlvbigpe3ZhciBkLGU7ZD1hLmV2ZW50cyxlPVtdO2ZvcihiIGluIGQpYz1kW2JdLGUucHVzaChhLmVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihiLGMsITEpKTtyZXR1cm4gZX0oKSk7cmV0dXJuIGd9LGIucHJvdG90eXBlLmRpc2FibGU9ZnVuY3Rpb24oKXt2YXIgYSxiLGMsZCxlO2Zvcih0aGlzLmNsaWNrYWJsZUVsZW1lbnRzLmZvckVhY2goZnVuY3Rpb24oYSl7cmV0dXJuIGEuY2xhc3NMaXN0LnJlbW92ZSgiZHotY2xpY2thYmxlIil9KSx0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXJzKCksZD10aGlzLmZpbGVzLGU9W10sYj0wLGM9ZC5sZW5ndGg7Yz5iO2IrKylhPWRbYl0sZS5wdXNoKHRoaXMuY2FuY2VsVXBsb2FkKGEpKTtyZXR1cm4gZX0sYi5wcm90b3R5cGUuZW5hYmxlPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuY2xpY2thYmxlRWxlbWVudHMuZm9yRWFjaChmdW5jdGlvbihhKXtyZXR1cm4gYS5jbGFzc0xpc3QuYWRkKCJkei1jbGlja2FibGUiKX0pLHRoaXMuc2V0dXBFdmVudExpc3RlbmVycygpfSxiLnByb3RvdHlwZS5maWxlc2l6ZT1mdW5jdGlvbihhKXt2YXIgYjtyZXR1cm4gYT49MTA5OTUxMTYyNzc3LjY/KGEvPTEwOTk1MTE2Mjc3Ny42LGI9IlRpQiIpOmE+PTEwNzM3NDE4Mi40PyhhLz0xMDczNzQxODIuNCxiPSJHaUIiKTphPj0xMDQ4NTcuNj8oYS89MTA0ODU3LjYsYj0iTWlCIik6YT49MTAyLjQ/KGEvPTEwMi40LGI9IktpQiIpOihhPTEwKmEsYj0iYiIpLCI8c3Ryb25nPiIrTWF0aC5yb3VuZChhKS8xMCsiPC9zdHJvbmc+ICIrYn0sYi5wcm90b3R5cGUuX3VwZGF0ZU1heEZpbGVzUmVhY2hlZENsYXNzPWZ1bmN0aW9uKCl7cmV0dXJuIG51bGwhPXRoaXMub3B0aW9ucy5tYXhGaWxlcyYmdGhpcy5nZXRBY2NlcHRlZEZpbGVzKCkubGVuZ3RoPj10aGlzLm9wdGlvbnMubWF4RmlsZXM/KHRoaXMuZ2V0QWNjZXB0ZWRGaWxlcygpLmxlbmd0aD09PXRoaXMub3B0aW9ucy5tYXhGaWxlcyYmdGhpcy5lbWl0KCJtYXhmaWxlc3JlYWNoZWQiLHRoaXMuZmlsZXMpLHRoaXMuZWxlbWVudC5jbGFzc0xpc3QuYWRkKCJkei1tYXgtZmlsZXMtcmVhY2hlZCIpKTp0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgiZHotbWF4LWZpbGVzLXJlYWNoZWQiKX0sYi5wcm90b3R5cGUuZHJvcD1mdW5jdGlvbihhKXt2YXIgYixjO2EuZGF0YVRyYW5zZmVyJiYodGhpcy5lbWl0KCJkcm9wIixhKSxiPWEuZGF0YVRyYW5zZmVyLmZpbGVzLGIubGVuZ3RoJiYoYz1hLmRhdGFUcmFuc2Zlci5pdGVtcyxjJiZjLmxlbmd0aCYmbnVsbCE9Y1swXS53ZWJraXRHZXRBc0VudHJ5P3RoaXMuX2FkZEZpbGVzRnJvbUl0ZW1zKGMpOnRoaXMuaGFuZGxlRmlsZXMoYikpKX0sYi5wcm90b3R5cGUucGFzdGU9ZnVuY3Rpb24oYSl7fSxiLnByb3RvdHlwZS5oYW5kbGVGaWxlcz1mdW5jdGlvbihhKXt2YXIgYixjLGQsZTtmb3IoZT1bXSxjPTAsZD1hLmxlbmd0aDtkPmM7YysrKWI9YVtjXSxlLnB1c2godGhpcy5hZGRGaWxlKGIpKTtyZXR1cm4gZX0sYi5wcm90b3R5cGUuX2FkZEZpbGVzRnJvbUl0ZW1zPWZ1bmN0aW9uKGEpe3ZhciBiLGMsZCxlLGY7Zm9yKGY9W10sZD0wLGU9YS5sZW5ndGg7ZT5kO2QrKyljPWFbZF0sbnVsbCE9Yy53ZWJraXRHZXRBc0VudHJ5JiYoYj1jLndlYmtpdEdldEFzRW50cnkoKSk/Yi5pc0ZpbGU/Zi5wdXNoKHRoaXMuYWRkRmlsZShjLmdldEFzRmlsZSgpKSk6Yi5pc0RpcmVjdG9yeT9mLnB1c2godGhpcy5fYWRkRmlsZXNGcm9tRGlyZWN0b3J5KGIsYi5uYW1lKSk6Zi5wdXNoKHZvaWQgMCk6bnVsbCE9Yy5nZXRBc0ZpbGU/bnVsbD09Yy5raW5kfHwiZmlsZSI9PT1jLmtpbmQ/Zi5wdXNoKHRoaXMuYWRkRmlsZShjLmdldEFzRmlsZSgpKSk6Zi5wdXNoKHZvaWQgMCk6Zi5wdXNoKHZvaWQgMCk7cmV0dXJuIGZ9LGIucHJvdG90eXBlLl9hZGRGaWxlc0Zyb21EaXJlY3Rvcnk9ZnVuY3Rpb24oYSxiKXt2YXIgYyxkLGU9dGhpcztyZXR1cm4gYz1hLmNyZWF0ZVJlYWRlcigpLGQ9ZnVuY3Rpb24oYSl7dmFyIGMsZCxmO2ZvcihkPTAsZj1hLmxlbmd0aDtmPmQ7ZCsrKWM9YVtkXSxjLmlzRmlsZT9jLmZpbGUoZnVuY3Rpb24oYSl7cmV0dXJuIGUub3B0aW9ucy5pZ25vcmVIaWRkZW5GaWxlcyYmIi4iPT09YS5uYW1lLnN1YnN0cmluZygwLDEpP3ZvaWQgMDooYS5mdWxsUGF0aD0iIitiKyIvIithLm5hbWUsZS5hZGRGaWxlKGEpKX0pOmMuaXNEaXJlY3RvcnkmJmUuX2FkZEZpbGVzRnJvbURpcmVjdG9yeShjLCIiK2IrIi8iK2MubmFtZSl9LGMucmVhZEVudHJpZXMoZCxmdW5jdGlvbihhKXtyZXR1cm4idW5kZWZpbmVkIiE9dHlwZW9mIGNvbnNvbGUmJm51bGwhPT1jb25zb2xlPyJmdW5jdGlvbiI9PXR5cGVvZiBjb25zb2xlLmxvZz9jb25zb2xlLmxvZyhhKTp2b2lkIDA6dm9pZCAwfSl9LGIucHJvdG90eXBlLmFjY2VwdD1mdW5jdGlvbihhLGMpe3JldHVybiBhLnNpemU+MTAyNCp0aGlzLm9wdGlvbnMubWF4RmlsZXNpemUqMTAyND9jKHRoaXMub3B0aW9ucy5kaWN0RmlsZVRvb0JpZy5yZXBsYWNlKCJ7e2ZpbGVzaXplfX0iLE1hdGgucm91bmQoYS5zaXplLzEwMjQvMTAuMjQpLzEwMCkucmVwbGFjZSgie3ttYXhGaWxlc2l6ZX19Iix0aGlzLm9wdGlvbnMubWF4RmlsZXNpemUpKTpiLmlzVmFsaWRGaWxlKGEsdGhpcy5vcHRpb25zLmFjY2VwdGVkRmlsZXMpP251bGwhPXRoaXMub3B0aW9ucy5tYXhGaWxlcyYmdGhpcy5nZXRBY2NlcHRlZEZpbGVzKCkubGVuZ3RoPj10aGlzLm9wdGlvbnMubWF4RmlsZXM/KGModGhpcy5vcHRpb25zLmRpY3RNYXhGaWxlc0V4Y2VlZGVkLnJlcGxhY2UoInt7bWF4RmlsZXN9fSIsdGhpcy5vcHRpb25zLm1heEZpbGVzKSksdGhpcy5lbWl0KCJtYXhmaWxlc2V4Y2VlZGVkIixhKSk6dGhpcy5vcHRpb25zLmFjY2VwdC5jYWxsKHRoaXMsYSxjKTpjKHRoaXMub3B0aW9ucy5kaWN0SW52YWxpZEZpbGVUeXBlKX0sYi5wcm90b3R5cGUuYWRkRmlsZT1mdW5jdGlvbihhKXt2YXIgYz10aGlzO3JldHVybiBhLnVwbG9hZD17cHJvZ3Jlc3M6MCx0b3RhbDphLnNpemUsYnl0ZXNTZW50OjB9LHRoaXMuZmlsZXMucHVzaChhKSxhLnN0YXR1cz1iLkFEREVELHRoaXMuZW1pdCgiYWRkZWRmaWxlIixhKSx0aGlzLl9lbnF1ZXVlVGh1bWJuYWlsKGEpLHRoaXMuYWNjZXB0KGEsZnVuY3Rpb24oYil7cmV0dXJuIGI/KGEuYWNjZXB0ZWQ9ITEsYy5fZXJyb3JQcm9jZXNzaW5nKFthXSxiKSk6Yy5lbnF1ZXVlRmlsZShhKSxjLl91cGRhdGVNYXhGaWxlc1JlYWNoZWRDbGFzcygpfSl9LGIucHJvdG90eXBlLmVucXVldWVGaWxlcz1mdW5jdGlvbihhKXt2YXIgYixjLGQ7Zm9yKGM9MCxkPWEubGVuZ3RoO2Q+YztjKyspYj1hW2NdLHRoaXMuZW5xdWV1ZUZpbGUoYik7cmV0dXJuIG51bGx9LGIucHJvdG90eXBlLmVucXVldWVGaWxlPWZ1bmN0aW9uKGEpe3ZhciBjPXRoaXM7aWYoYS5hY2NlcHRlZD0hMCxhLnN0YXR1cyE9PWIuQURERUQpdGhyb3cgbmV3IEVycm9yKCJUaGlzIGZpbGUgY2FuJ3QgYmUgcXVldWVkIGJlY2F1c2UgaXQgaGFzIGFscmVhZHkgYmVlbiBwcm9jZXNzZWQgb3Igd2FzIHJlamVjdGVkLiIpO3JldHVybiBhLnN0YXR1cz1iLlFVRVVFRCx0aGlzLm9wdGlvbnMuYXV0b1Byb2Nlc3NRdWV1ZT9zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7cmV0dXJuIGMucHJvY2Vzc1F1ZXVlKCl9LDApOnZvaWQgMH0sYi5wcm90b3R5cGUuX3RodW1ibmFpbFF1ZXVlPVtdLGIucHJvdG90eXBlLl9wcm9jZXNzaW5nVGh1bWJuYWlsPSExLGIucHJvdG90eXBlLl9lbnF1ZXVlVGh1bWJuYWlsPWZ1bmN0aW9uKGEpe3ZhciBiPXRoaXM7cmV0dXJuIHRoaXMub3B0aW9ucy5jcmVhdGVJbWFnZVRodW1ibmFpbHMmJmEudHlwZS5tYXRjaCgvaW1hZ2UuKi8pJiZhLnNpemU8PTEwMjQqdGhpcy5vcHRpb25zLm1heFRodW1ibmFpbEZpbGVzaXplKjEwMjQ/KHRoaXMuX3RodW1ibmFpbFF1ZXVlLnB1c2goYSksc2V0VGltZW91dChmdW5jdGlvbigpe3JldHVybiBiLl9wcm9jZXNzVGh1bWJuYWlsUXVldWUoKX0sMCkpOnZvaWQgMH0sYi5wcm90b3R5cGUuX3Byb2Nlc3NUaHVtYm5haWxRdWV1ZT1mdW5jdGlvbigpe3ZhciBhPXRoaXM7aWYoIXRoaXMuX3Byb2Nlc3NpbmdUaHVtYm5haWwmJjAhPT10aGlzLl90aHVtYm5haWxRdWV1ZS5sZW5ndGgpcmV0dXJuIHRoaXMuX3Byb2Nlc3NpbmdUaHVtYm5haWw9ITAsdGhpcy5jcmVhdGVUaHVtYm5haWwodGhpcy5fdGh1bWJuYWlsUXVldWUuc2hpZnQoKSxmdW5jdGlvbigpe3JldHVybiBhLl9wcm9jZXNzaW5nVGh1bWJuYWlsPSExLGEuX3Byb2Nlc3NUaHVtYm5haWxRdWV1ZSgpfSl9LGIucHJvdG90eXBlLnJlbW92ZUZpbGU9ZnVuY3Rpb24oYSl7cmV0dXJuIGEuc3RhdHVzPT09Yi5VUExPQURJTkcmJnRoaXMuY2FuY2VsVXBsb2FkKGEpLHRoaXMuZmlsZXM9aih0aGlzLmZpbGVzLGEpLHRoaXMuZW1pdCgicmVtb3ZlZGZpbGUiLGEpLDA9PT10aGlzLmZpbGVzLmxlbmd0aD90aGlzLmVtaXQoInJlc2V0Iik6dm9pZCAwfSxiLnByb3RvdHlwZS5yZW1vdmVBbGxGaWxlcz1mdW5jdGlvbihhKXt2YXIgYyxkLGUsZjtmb3IobnVsbD09YSYmKGE9ITEpLGY9dGhpcy5maWxlcy5zbGljZSgpLGQ9MCxlPWYubGVuZ3RoO2U+ZDtkKyspYz1mW2RdLChjLnN0YXR1cyE9PWIuVVBMT0FESU5HfHxhKSYmdGhpcy5yZW1vdmVGaWxlKGMpO3JldHVybiBudWxsfSxiLnByb3RvdHlwZS5jcmVhdGVUaHVtYm5haWw9ZnVuY3Rpb24oYSxiKXt2YXIgYyxkPXRoaXM7cmV0dXJuIGM9bmV3IEZpbGVSZWFkZXIsYy5vbmxvYWQ9ZnVuY3Rpb24oKXt2YXIgZTtyZXR1cm4gZT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KCJpbWciKSxlLm9ubG9hZD1mdW5jdGlvbigpe3ZhciBjLGYsZyxpLGosayxsLG07cmV0dXJuIGEud2lkdGg9ZS53aWR0aCxhLmhlaWdodD1lLmhlaWdodCxnPWQub3B0aW9ucy5yZXNpemUuY2FsbChkLGEpLG51bGw9PWcudHJnV2lkdGgmJihnLnRyZ1dpZHRoPWQub3B0aW9ucy50aHVtYm5haWxXaWR0aCksbnVsbD09Zy50cmdIZWlnaHQmJihnLnRyZ0hlaWdodD1kLm9wdGlvbnMudGh1bWJuYWlsSGVpZ2h0KSxjPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImNhbnZhcyIpLGY9Yy5nZXRDb250ZXh0KCIyZCIpLGMud2lkdGg9Zy50cmdXaWR0aCxjLmhlaWdodD1nLnRyZ0hlaWdodCxoKGYsZSxudWxsIT0oaj1nLnNyY1gpP2o6MCxudWxsIT0oaz1nLnNyY1kpP2s6MCxnLnNyY1dpZHRoLGcuc3JjSGVpZ2h0LG51bGwhPShsPWcudHJnWCk/bDowLG51bGwhPShtPWcudHJnWSk/bTowLGcudHJnV2lkdGgsZy50cmdIZWlnaHQpLGk9Yy50b0RhdGFVUkwoImltYWdlL3BuZyIpLGQuZW1pdCgidGh1bWJuYWlsIixhLGkpLG51bGwhPWI/YigpOnZvaWQgMH0sZS5zcmM9Yy5yZXN1bHR9LGMucmVhZEFzRGF0YVVSTChhKX0sYi5wcm90b3R5cGUucHJvY2Vzc1F1ZXVlPWZ1bmN0aW9uKCl7dmFyIGEsYixjLGQ7aWYoYj10aGlzLm9wdGlvbnMucGFyYWxsZWxVcGxvYWRzLGM9dGhpcy5nZXRVcGxvYWRpbmdGaWxlcygpLmxlbmd0aCxhPWMsIShjPj1iKSYmKGQ9dGhpcy5nZXRRdWV1ZWRGaWxlcygpLGQubGVuZ3RoPjApKXtpZih0aGlzLm9wdGlvbnMudXBsb2FkTXVsdGlwbGUpcmV0dXJuIHRoaXMucHJvY2Vzc0ZpbGVzKGQuc2xpY2UoMCxiLWMpKTtmb3IoO2I+YTspe2lmKCFkLmxlbmd0aClyZXR1cm47dGhpcy5wcm9jZXNzRmlsZShkLnNoaWZ0KCkpLGErK319fSxiLnByb3RvdHlwZS5wcm9jZXNzRmlsZT1mdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5wcm9jZXNzRmlsZXMoW2FdKX0sYi5wcm90b3R5cGUucHJvY2Vzc0ZpbGVzPWZ1bmN0aW9uKGEpe3ZhciBjLGQsZTtmb3IoZD0wLGU9YS5sZW5ndGg7ZT5kO2QrKyljPWFbZF0sYy5wcm9jZXNzaW5nPSEwLGMuc3RhdHVzPWIuVVBMT0FESU5HLHRoaXMuZW1pdCgicHJvY2Vzc2luZyIsYyk7cmV0dXJuIHRoaXMub3B0aW9ucy51cGxvYWRNdWx0aXBsZSYmdGhpcy5lbWl0KCJwcm9jZXNzaW5nbXVsdGlwbGUiLGEpLHRoaXMudXBsb2FkRmlsZXMoYSl9LGIucHJvdG90eXBlLl9nZXRGaWxlc1dpdGhYaHI9ZnVuY3Rpb24oYSl7dmFyIGIsYztyZXR1cm4gYz1mdW5jdGlvbigpe3ZhciBjLGQsZSxmO2ZvcihlPXRoaXMuZmlsZXMsZj1bXSxjPTAsZD1lLmxlbmd0aDtkPmM7YysrKWI9ZVtjXSxiLnhocj09PWEmJmYucHVzaChiKTtyZXR1cm4gZn0uY2FsbCh0aGlzKX0sYi5wcm90b3R5cGUuY2FuY2VsVXBsb2FkPWZ1bmN0aW9uKGEpe3ZhciBjLGQsZSxmLGcsaCxpO2lmKGEuc3RhdHVzPT09Yi5VUExPQURJTkcpe2ZvcihkPXRoaXMuX2dldEZpbGVzV2l0aFhocihhLnhociksZT0wLGc9ZC5sZW5ndGg7Zz5lO2UrKyljPWRbZV0sYy5zdGF0dXM9Yi5DQU5DRUxFRDtmb3IoYS54aHIuYWJvcnQoKSxmPTAsaD1kLmxlbmd0aDtoPmY7ZisrKWM9ZFtmXSx0aGlzLmVtaXQoImNhbmNlbGVkIixjKTt0aGlzLm9wdGlvbnMudXBsb2FkTXVsdGlwbGUmJnRoaXMuZW1pdCgiY2FuY2VsZWRtdWx0aXBsZSIsZCl9ZWxzZSgoaT1hLnN0YXR1cyk9PT1iLkFEREVEfHxpPT09Yi5RVUVVRUQpJiYoYS5zdGF0dXM9Yi5DQU5DRUxFRCx0aGlzLmVtaXQoImNhbmNlbGVkIixhKSx0aGlzLm9wdGlvbnMudXBsb2FkTXVsdGlwbGUmJnRoaXMuZW1pdCgiY2FuY2VsZWRtdWx0aXBsZSIsW2FdKSk7cmV0dXJuIHRoaXMub3B0aW9ucy5hdXRvUHJvY2Vzc1F1ZXVlP3RoaXMucHJvY2Vzc1F1ZXVlKCk6dm9pZCAwfSxiLnByb3RvdHlwZS51cGxvYWRGaWxlPWZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLnVwbG9hZEZpbGVzKFthXSl9LGIucHJvdG90eXBlLnVwbG9hZEZpbGVzPWZ1bmN0aW9uKGEpe3ZhciBkLGUsZixnLGgsaSxqLGssbCxtLG4sbyxwLHEscixzLHQsdSx2LHcseCx5LHosQSxCLEMsRCxFLEYsRyxILEk9dGhpcztmb3Iocz1uZXcgWE1MSHR0cFJlcXVlc3QsdD0wLHg9YS5sZW5ndGg7eD50O3QrKylkPWFbdF0sZC54aHI9cztzLm9wZW4odGhpcy5vcHRpb25zLm1ldGhvZCx0aGlzLm9wdGlvbnMudXJsLCEwKSxzLndpdGhDcmVkZW50aWFscz0hIXRoaXMub3B0aW9ucy53aXRoQ3JlZGVudGlhbHMscD1udWxsLGY9ZnVuY3Rpb24oKXt2YXIgYixjLGU7Zm9yKGU9W10sYj0wLGM9YS5sZW5ndGg7Yz5iO2IrKylkPWFbYl0sZS5wdXNoKEkuX2Vycm9yUHJvY2Vzc2luZyhhLHB8fEkub3B0aW9ucy5kaWN0UmVzcG9uc2VFcnJvci5yZXBsYWNlKCJ7e3N0YXR1c0NvZGV9fSIscy5zdGF0dXMpLHMpKTtyZXR1cm4gZX0scT1mdW5jdGlvbihiKXt2YXIgYyxlLGYsZyxoLGksaixrLGw7aWYobnVsbCE9Yilmb3IoZT0xMDAqYi5sb2FkZWQvYi50b3RhbCxmPTAsaT1hLmxlbmd0aDtpPmY7ZisrKWQ9YVtmXSxkLnVwbG9hZD17cHJvZ3Jlc3M6ZSx0b3RhbDpiLnRvdGFsLGJ5dGVzU2VudDpiLmxvYWRlZH07ZWxzZXtmb3IoYz0hMCxlPTEwMCxnPTAsaj1hLmxlbmd0aDtqPmc7ZysrKWQ9YVtnXSwoMTAwIT09ZC51cGxvYWQucHJvZ3Jlc3N8fGQudXBsb2FkLmJ5dGVzU2VudCE9PWQudXBsb2FkLnRvdGFsKSYmKGM9ITEpLGQudXBsb2FkLnByb2dyZXNzPWUsZC51cGxvYWQuYnl0ZXNTZW50PWQudXBsb2FkLnRvdGFsO2lmKGMpcmV0dXJufWZvcihsPVtdLGg9MCxrPWEubGVuZ3RoO2s+aDtoKyspZD1hW2hdLGwucHVzaChJLmVtaXQoInVwbG9hZHByb2dyZXNzIixkLGUsZC51cGxvYWQuYnl0ZXNTZW50KSk7cmV0dXJuIGx9LHMub25sb2FkPWZ1bmN0aW9uKGMpe3ZhciBkO2lmKGFbMF0uc3RhdHVzIT09Yi5DQU5DRUxFRCYmND09PXMucmVhZHlTdGF0ZSl7aWYocD1zLnJlc3BvbnNlVGV4dCxzLmdldFJlc3BvbnNlSGVhZGVyKCJjb250ZW50LXR5cGUiKSYmfnMuZ2V0UmVzcG9uc2VIZWFkZXIoImNvbnRlbnQtdHlwZSIpLmluZGV4T2YoImFwcGxpY2F0aW9uL2pzb24iKSl0cnl7cD1KU09OLnBhcnNlKHApfWNhdGNoKGUpe2M9ZSxwPSJJbnZhbGlkIEpTT04gcmVzcG9uc2UgZnJvbSBzZXJ2ZXIuIn1yZXR1cm4gcSgpLDIwMDw9KGQ9cy5zdGF0dXMpJiYzMDA+ZD9JLl9maW5pc2hlZChhLHAsYyk6ZigpfX0scy5vbmVycm9yPWZ1bmN0aW9uKCl7cmV0dXJuIGFbMF0uc3RhdHVzIT09Yi5DQU5DRUxFRD9mKCk6dm9pZCAwfSxvPW51bGwhPShEPXMudXBsb2FkKT9EOnMsby5vbnByb2dyZXNzPXEsaT17QWNjZXB0OiJhcHBsaWNhdGlvbi9qc29uIiwiQ2FjaGUtQ29udHJvbCI6Im5vLWNhY2hlIiwiWC1SZXF1ZXN0ZWQtV2l0aCI6IlhNTEh0dHBSZXF1ZXN0In0sdGhpcy5vcHRpb25zLmhlYWRlcnMmJmMoaSx0aGlzLm9wdGlvbnMuaGVhZGVycyk7Zm9yKGcgaW4gaSloPWlbZ10scy5zZXRSZXF1ZXN0SGVhZGVyKGcsaCk7aWYoZT1uZXcgRm9ybURhdGEsdGhpcy5vcHRpb25zLnBhcmFtcyl7RT10aGlzLm9wdGlvbnMucGFyYW1zO2ZvcihtIGluIEUpcj1FW21dLGUuYXBwZW5kKG0scil9Zm9yKHU9MCx5PWEubGVuZ3RoO3k+dTt1KyspZD1hW3VdLHRoaXMuZW1pdCgic2VuZGluZyIsZCxzLGUpO2lmKHRoaXMub3B0aW9ucy51cGxvYWRNdWx0aXBsZSYmdGhpcy5lbWl0KCJzZW5kaW5nbXVsdGlwbGUiLGEscyxlKSwiRk9STSI9PT10aGlzLmVsZW1lbnQudGFnTmFtZSlmb3IoRj10aGlzLmVsZW1lbnQucXVlcnlTZWxlY3RvckFsbCgiaW5wdXQsIHRleHRhcmVhLCBzZWxlY3QsIGJ1dHRvbiIpLHY9MCx6PUYubGVuZ3RoO3o+djt2KyspaWYoaj1GW3ZdLGs9ai5nZXRBdHRyaWJ1dGUoIm5hbWUiKSxsPWouZ2V0QXR0cmlidXRlKCJ0eXBlIiksIlNFTEVDVCI9PT1qLnRhZ05hbWUmJmouaGFzQXR0cmlidXRlKCJtdWx0aXBsZSIpKWZvcihHPWoub3B0aW9ucyx3PTAsQT1HLmxlbmd0aDtBPnc7dysrKW49R1t3XSxuLnNlbGVjdGVkJiZlLmFwcGVuZChrLG4udmFsdWUpO2Vsc2UoIWx8fCJjaGVja2JveCIhPT0oSD1sLnRvTG93ZXJDYXNlKCkpJiYicmFkaW8iIT09SHx8ai5jaGVja2VkKSYmZS5hcHBlbmQoayxqLnZhbHVlKTtmb3IoQz0wLEI9YS5sZW5ndGg7Qj5DO0MrKylkPWFbQ10sZS5hcHBlbmQoIiIrdGhpcy5vcHRpb25zLnBhcmFtTmFtZSsodGhpcy5vcHRpb25zLnVwbG9hZE11bHRpcGxlPyJbXSI6IiIpLGQsZC5uYW1lKTtyZXR1cm4gcy5zZW5kKGUpfSxiLnByb3RvdHlwZS5fZmluaXNoZWQ9ZnVuY3Rpb24oYSxjLGQpe3ZhciBlLGYsZztmb3IoZj0wLGc9YS5sZW5ndGg7Zz5mO2YrKyllPWFbZl0sZS5zdGF0dXM9Yi5TVUNDRVNTLHRoaXMuZW1pdCgic3VjY2VzcyIsZSxjLGQpLHRoaXMuZW1pdCgiY29tcGxldGUiLGUpO3JldHVybiB0aGlzLm9wdGlvbnMudXBsb2FkTXVsdGlwbGUmJih0aGlzLmVtaXQoInN1Y2Nlc3NtdWx0aXBsZSIsYSxjLGQpLHRoaXMuZW1pdCgiY29tcGxldGVtdWx0aXBsZSIsYSkpLHRoaXMub3B0aW9ucy5hdXRvUHJvY2Vzc1F1ZXVlP3RoaXMucHJvY2Vzc1F1ZXVlKCk6dm9pZCAwfSxiLnByb3RvdHlwZS5fZXJyb3JQcm9jZXNzaW5nPWZ1bmN0aW9uKGEsYyxkKXt2YXIgZSxmLGc7Zm9yKGY9MCxnPWEubGVuZ3RoO2c+ZjtmKyspZT1hW2ZdLGUuc3RhdHVzPWIuRVJST1IsdGhpcy5lbWl0KCJlcnJvciIsZSxjLGQpLHRoaXMuZW1pdCgiY29tcGxldGUiLGUpO3JldHVybiB0aGlzLm9wdGlvbnMudXBsb2FkTXVsdGlwbGUmJih0aGlzLmVtaXQoImVycm9ybXVsdGlwbGUiLGEsYyxkKSx0aGlzLmVtaXQoImNvbXBsZXRlbXVsdGlwbGUiLGEpKSx0aGlzLm9wdGlvbnMuYXV0b1Byb2Nlc3NRdWV1ZT90aGlzLnByb2Nlc3NRdWV1ZSgpOnZvaWQgMH0sYn0oZCksYS52ZXJzaW9uPSIzLjguMyIsYS5vcHRpb25zPXt9LGEub3B0aW9uc0ZvckVsZW1lbnQ9ZnVuY3Rpb24oYil7cmV0dXJuIGIuZ2V0QXR0cmlidXRlKCJpZCIpP2Eub3B0aW9uc1tlKGIuZ2V0QXR0cmlidXRlKCJpZCIpKV06dm9pZCAwfSxhLmluc3RhbmNlcz1bXSxhLmZvckVsZW1lbnQ9ZnVuY3Rpb24oYSl7aWYoInN0cmluZyI9PXR5cGVvZiBhJiYoYT1kb2N1bWVudC5xdWVyeVNlbGVjdG9yKGEpKSxudWxsPT0obnVsbCE9YT9hLmRyb3B6b25lOnZvaWQgMCkpdGhyb3cgbmV3IEVycm9yKCJObyBEcm9wem9uZSBmb3VuZCBmb3IgZ2l2ZW4gZWxlbWVudC4gVGhpcyBpcyBwcm9iYWJseSBiZWNhdXNlIHlvdSdyZSB0cnlpbmcgdG8gYWNjZXNzIGl0IGJlZm9yZSBEcm9wem9uZSBoYWQgdGhlIHRpbWUgdG8gaW5pdGlhbGl6ZS4gVXNlIHRoZSBgaW5pdGAgb3B0aW9uIHRvIHNldHVwIGFueSBhZGRpdGlvbmFsIG9ic2VydmVycyBvbiB5b3VyIERyb3B6b25lLiIpO3JldHVybiBhLmRyb3B6b25lfSxhLmF1dG9EaXNjb3Zlcj0hMCxhLmRpc2NvdmVyPWZ1bmN0aW9uKCl7dmFyIGIsYyxkLGUsZixnO2Zvcihkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsP2Q9ZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgiLmRyb3B6b25lIik6KGQ9W10sYj1mdW5jdGlvbihhKXt2YXIgYixjLGUsZjtmb3IoZj1bXSxjPTAsZT1hLmxlbmd0aDtlPmM7YysrKWI9YVtjXSwvKF58IClkcm9wem9uZSgkfCApLy50ZXN0KGIuY2xhc3NOYW1lKT9mLnB1c2goZC5wdXNoKGIpKTpmLnB1c2godm9pZCAwKTtyZXR1cm4gZn0sYihkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgiZGl2IikpLGIoZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoImZvcm0iKSkpLGc9W10sZT0wLGY9ZC5sZW5ndGg7Zj5lO2UrKyljPWRbZV0sYS5vcHRpb25zRm9yRWxlbWVudChjKSE9PSExP2cucHVzaChuZXcgYShjKSk6Zy5wdXNoKHZvaWQgMCk7cmV0dXJuIGd9LGEuYmxhY2tsaXN0ZWRCcm93c2Vycz1bL29wZXJhLipNYWNpbnRvc2guKnZlcnNpb25cLzEyL2ldLGEuaXNCcm93c2VyU3VwcG9ydGVkPWZ1bmN0aW9uKCl7dmFyIGIsYyxkLGUsZjtpZihiPSEwLHdpbmRvdy5GaWxlJiZ3aW5kb3cuRmlsZVJlYWRlciYmd2luZG93LkZpbGVMaXN0JiZ3aW5kb3cuQmxvYiYmd2luZG93LkZvcm1EYXRhJiZkb2N1bWVudC5xdWVyeVNlbGVjdG9yKWlmKCJjbGFzc0xpc3QiaW4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiYSIpKWZvcihmPWEuYmxhY2tsaXN0ZWRCcm93c2VycyxkPTAsZT1mLmxlbmd0aDtlPmQ7ZCsrKWM9ZltkXSxjLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCkmJihiPSExKTtlbHNlIGI9ITE7ZWxzZSBiPSExO3JldHVybiBifSxqPWZ1bmN0aW9uKGEsYil7dmFyIGMsZCxlLGY7Zm9yKGY9W10sZD0wLGU9YS5sZW5ndGg7ZT5kO2QrKyljPWFbZF0sYyE9PWImJmYucHVzaChjKTtyZXR1cm4gZn0sZT1mdW5jdGlvbihhKXtyZXR1cm4gYS5yZXBsYWNlKC9bXC1fXShcdykvZyxmdW5jdGlvbihhKXtyZXR1cm4gYVsxXS50b1VwcGVyQ2FzZSgpfSl9LGEuY3JlYXRlRWxlbWVudD1mdW5jdGlvbihhKXt2YXIgYjtyZXR1cm4gYj1kb2N1bWVudC5jcmVhdGVFbGVtZW50KCJkaXYiKSxiLmlubmVySFRNTD1hLGIuY2hpbGROb2Rlc1swXX0sYS5lbGVtZW50SW5zaWRlPWZ1bmN0aW9uKGEsYil7aWYoYT09PWIpcmV0dXJuITA7Zm9yKDthPWEucGFyZW50Tm9kZTspaWYoYT09PWIpcmV0dXJuITA7cmV0dXJuITF9LGEuZ2V0RWxlbWVudD1mdW5jdGlvbihhLGIpe3ZhciBjO2lmKCJzdHJpbmciPT10eXBlb2YgYT9jPWRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYSk6bnVsbCE9YS5ub2RlVHlwZSYmKGM9YSksbnVsbD09Yyl0aHJvdyBuZXcgRXJyb3IoIkludmFsaWQgYCIrYisiYCBvcHRpb24gcHJvdmlkZWQuIFBsZWFzZSBwcm92aWRlIGEgQ1NTIHNlbGVjdG9yIG9yIGEgcGxhaW4gSFRNTCBlbGVtZW50LiIpO3JldHVybiBjfSxhLmdldEVsZW1lbnRzPWZ1bmN0aW9uKGEsYil7dmFyIGMsZCxlLGYsZyxoLGksajtpZihhIGluc3RhbmNlb2YgQXJyYXkpe2U9W107dHJ5e2ZvcihmPTAsaD1hLmxlbmd0aDtoPmY7ZisrKWQ9YVtmXSxlLnB1c2godGhpcy5nZXRFbGVtZW50KGQsYikpfWNhdGNoKGspe2M9ayxlPW51bGx9fWVsc2UgaWYoInN0cmluZyI9PXR5cGVvZiBhKWZvcihlPVtdLGo9ZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChhKSxnPTAsaT1qLmxlbmd0aDtpPmc7ZysrKWQ9altnXSxlLnB1c2goZCk7ZWxzZSBudWxsIT1hLm5vZGVUeXBlJiYoZT1bYV0pO2lmKG51bGw9PWV8fCFlLmxlbmd0aCl0aHJvdyBuZXcgRXJyb3IoIkludmFsaWQgYCIrYisiYCBvcHRpb24gcHJvdmlkZWQuIFBsZWFzZSBwcm92aWRlIGEgQ1NTIHNlbGVjdG9yLCBhIHBsYWluIEhUTUwgZWxlbWVudCBvciBhIGxpc3Qgb2YgdGhvc2UuIik7cmV0dXJuIGV9LGEuY29uZmlybT1mdW5jdGlvbihhLGIsYyl7cmV0dXJuIHdpbmRvdy5jb25maXJtKGEpP2IoKTpudWxsIT1jP2MoKTp2b2lkIDB9LGEuaXNWYWxpZEZpbGU9ZnVuY3Rpb24oYSxiKXt2YXIgYyxkLGUsZixnO2lmKCFiKXJldHVybiEwO2ZvcihiPWIuc3BsaXQoIiwiKSxkPWEudHlwZSxjPWQucmVwbGFjZSgvXC8uKiQvLCIiKSxmPTAsZz1iLmxlbmd0aDtnPmY7ZisrKWlmKGU9YltmXSxlPWUudHJpbSgpLCIuIj09PWUuY2hhckF0KDApKXtpZigtMSE9PWEubmFtZS50b0xvd2VyQ2FzZSgpLmluZGV4T2YoZS50b0xvd2VyQ2FzZSgpLGEubmFtZS5sZW5ndGgtZS5sZW5ndGgpKXJldHVybiEwfWVsc2UgaWYoL1wvXCokLy50ZXN0KGUpKXtpZihjPT09ZS5yZXBsYWNlKC9cLy4qJC8sIiIpKXJldHVybiEwfWVsc2UgaWYoZD09PWUpcmV0dXJuITA7cmV0dXJuITF9LCJ1bmRlZmluZWQiIT10eXBlb2YgalF1ZXJ5JiZudWxsIT09alF1ZXJ5JiYoalF1ZXJ5LmZuLmRyb3B6b25lPWZ1bmN0aW9uKGIpe3JldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKXtyZXR1cm4gbmV3IGEodGhpcyxiKX0pfSksInVuZGVmaW5lZCIhPXR5cGVvZiBjJiZudWxsIT09Yz9jLmV4cG9ydHM9YTp3aW5kb3cuRHJvcHpvbmU9YSxhLkFEREVEPSJhZGRlZCIsYS5RVUVVRUQ9InF1ZXVlZCIsYS5BQ0NFUFRFRD1hLlFVRVVFRCxhLlVQTE9BRElORz0idXBsb2FkaW5nIixhLlBST0NFU1NJTkc9YS5VUExPQURJTkcsYS5DQU5DRUxFRD0iY2FuY2VsZWQiLGEuRVJST1I9ImVycm9yIixhLlNVQ0NFU1M9InN1Y2Nlc3MiLGc9ZnVuY3Rpb24oYSl7dmFyIGIsYyxkLGUsZixnLGgsaSxqLGs7Zm9yKGg9YS5uYXR1cmFsV2lkdGgsZz1hLm5hdHVyYWxIZWlnaHQsYz1kb2N1bWVudC5jcmVhdGVFbGVtZW50KCJjYW52YXMiKSxjLndpZHRoPTEsYy5oZWlnaHQ9ZyxkPWMuZ2V0Q29udGV4dCgiMmQiKSxkLmRyYXdJbWFnZShhLDAsMCksZT1kLmdldEltYWdlRGF0YSgwLDAsMSxnKS5kYXRhLGs9MCxmPWcsaT1nO2k+azspYj1lWzQqKGktMSkrM10sMD09PWI/Zj1pOms9aSxpPWYraz4+MTtyZXR1cm4gaj1pL2csMD09PWo/MTpqfSxoPWZ1bmN0aW9uKGEsYixjLGQsZSxmLGgsaSxqLGspe3ZhciBsO3JldHVybiBsPWcoYiksYS5kcmF3SW1hZ2UoYixjLGQsZSxmLGgsaSxqLGsvbCl9LGY9ZnVuY3Rpb24oYSxiKXt2YXIgYyxkLGUsZixnLGgsaSxqLGs7aWYoZT0hMSxrPSEwLGQ9YS5kb2N1bWVudCxqPWQuZG9jdW1lbnRFbGVtZW50LGM9ZC5hZGRFdmVudExpc3RlbmVyPyJhZGRFdmVudExpc3RlbmVyIjoiYXR0YWNoRXZlbnQiLGk9ZC5hZGRFdmVudExpc3RlbmVyPyJyZW1vdmVFdmVudExpc3RlbmVyIjoiZGV0YWNoRXZlbnQiLGg9ZC5hZGRFdmVudExpc3RlbmVyPyIiOiJvbiIsZj1mdW5jdGlvbihjKXtyZXR1cm4icmVhZHlzdGF0ZWNoYW5nZSIhPT1jLnR5cGV8fCJjb21wbGV0ZSI9PT1kLnJlYWR5U3RhdGU/KCgibG9hZCI9PT1jLnR5cGU/YTpkKVtpXShoK2MudHlwZSxmLCExKSwhZSYmKGU9ITApP2IuY2FsbChhLGMudHlwZXx8Yyk6dm9pZCAwKTp2b2lkIDB9LGc9ZnVuY3Rpb24oKXt2YXIgYTt0cnl7ai5kb1Njcm9sbCgibGVmdCIpfWNhdGNoKGIpe3JldHVybiBhPWIsc2V0VGltZW91dChnLDUwKSx2b2lkIDB9cmV0dXJuIGYoInBvbGwiKX0sImNvbXBsZXRlIiE9PWQucmVhZHlTdGF0ZSl7aWYoZC5jcmVhdGVFdmVudE9iamVjdCYmai5kb1Njcm9sbCl7dHJ5e2s9IWEuZnJhbWVFbGVtZW50fWNhdGNoKGwpe31rJiZnKCl9cmV0dXJuIGRbY10oaCsiRE9NQ29udGVudExvYWRlZCIsZiwhMSksZFtjXShoKyJyZWFkeXN0YXRlY2hhbmdlIixmLCExKSxhW2NdKGgrImxvYWQiLGYsITEpfX0sYS5fYXV0b0Rpc2NvdmVyRnVuY3Rpb249ZnVuY3Rpb24oKXtyZXR1cm4gYS5hdXRvRGlzY292ZXI/YS5kaXNjb3ZlcigpOnZvaWQgMH0sZih3aW5kb3csYS5fYXV0b0Rpc2NvdmVyRnVuY3Rpb24pfSkuY2FsbCh0aGlzKX0pLGEuYWxpYXMoImNvbXBvbmVudC1lbWl0dGVyL2luZGV4LmpzIiwiZHJvcHpvbmUvZGVwcy9lbWl0dGVyL2luZGV4LmpzIiksYS5hbGlhcygiY29tcG9uZW50LWVtaXR0ZXIvaW5kZXguanMiLCJlbWl0dGVyL2luZGV4LmpzIiksIm9iamVjdCI9PXR5cGVvZiBleHBvcnRzP21vZHVsZS5leHBvcnRzPWEoImRyb3B6b25lIik6ImZ1bmN0aW9uIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD9kZWZpbmUoZnVuY3Rpb24oKXtyZXR1cm4gYSgiZHJvcHpvbmUiKX0pOnRoaXMuRHJvcHpvbmU9YSgiZHJvcHpvbmUiKX0oKTs="
dropzone = Base64.decode64(dropzone) # dropzone.js by dropzonejs.com
$fileName = "ThinkDifferent.txt"
$fileContent = "Content-Type: text/plain\r\n\r\nHere's to the crazy ones.
The misfits.
The rebels.
The troublemakers.
The round pegs in the square holes.
The ones who see things differently.
They're not fond of rules.
And they have no respect for the status quo.
You can quote them, disagree with them, glorify or vilify them.
About the only thing you can't do is ignore them.
Because they change things.
They push the human race forward.
While some see them as the crazy ones, we see genius.
Because the people who are crazy enough to think
they can change the world, are the ones who do.
"
sharebox_html = '
<html>
	<head>
		<script src="http://ajax.googleapis.com/ajax/libs/jquery/2.0.3/jquery.min.js"></script>
		<script>
			function utf8_to_b64( str ) {
			  return window.btoa(unescape(encodeURIComponent( str )));
			}

			function b64_to_utf8( str ) {
			  return decodeURIComponent(escape(window.atob( str )));
			}
		</script>
		<script src="gpDropzone.js"></script>
		<style type="text/css">
            .dropzone-div {
                border: 2px dashed #ccc;
                width: 300px;
                height: 200px;
            }
        </style>
	</head>
	<body>
		<form action="/gpFileUpload" class="dropzone" id="sharezone">
		<h1 id="shareboxTitle">Sharebox</h1>
		</form>
		<div>Shared file: <span id="downloadZone"></span></div>
		<br />
		<textarea id="sharebox" rows="24" cols="80"></textarea>
		<div id="target"></div>
		<br />
		<div id="mutexes"></div>
    <div style="color: grey">Sharebox v' + $sharebox_version.to_s() + ' by <a href="http://cnphil.com/" style="color:grey; text-decoration:none">Phil Xiaojun Hu</a></div>
		<script>
			Dropzone.options.sharezone = {
				dictDefaultMessage: "",
				previewsContainer: "#target",
        clickable: "#shareboxTitle",
        uploadprogress: function(file, progress, bytesSent) {
          str = "Sharebox";
          bef = Math.floor((progress / 100) * str.length);
          bef_str = "<span style=\"color: black\">" + str.substring(0, bef) + "</span>"
          aft_str = "<span style=\"color: grey\">" + str.substring(bef, str.length) + "</span>"
          $("#shareboxTitle").html(bef_str + aft_str);
        },
				complete: function(file) {
          window.stopBlinking = 1;
          /*setTimeout(function() {
              window.stopBlinking = true;
          }, 1000);*/
          blink("#shareboxTitle");

          function blink(selector) {
              $(selector).fadeOut("slow", function() {
                  $(this).fadeIn("slow", function() {
                      if (window.stopBlinking > 0) {window.stopBlinking -= 1; blink(this);} else {$(this).show();}
                  });
              });
          }
					$("#shareboxTitle").html("Sharebox");
				},
				maxThumbnailFilesize: 0
			};

			// sharebox text sync below
			window.mutex = 0;
			window.needpush = 0;

			function tryPasting( str )
			{
				var result = b64_to_utf8(str);
				$("#sharebox").val(result);
			}

			function pushAndPaste( str )
			{
				if(window.mutex != 0) {
					return;
				}
				window.mutex = 1;
				var to_upload = utf8_to_b64(str);
				if(str == "__INIT__") to_upload = str;
				var pertain_needpush = window.needpush;
				if(window.needpush == 0) {
					to_upload = "__INIT__"
				} else {
					window.needpush = 0;
				}

				$("#target").html(to_upload);

				$.ajax({
					type: "POST",
					url: "gpClipboard",
					timeout: 2000,
					data: { "sharebox_post_board":to_upload },
					success: function(data) {
						if(window.mutex != -1) {
							tryPasting(data);
						}
						window.mutex = 0;
					},
					error: function (XMLHttpRequest, textStatus, errorThrown) {
						$("#target").html("error retrieving content");
						window.needpush = pertain_needpush;
						window.mutex = 0;
					}
				});
			}
      
      function scanForDownload()
      {
				$.ajax({
					type: "GET",
					url: "gpFilename",
					timeout: 2000,
					success: function(data) {
						$("#downloadZone").html("<a href=\"gpFileDownload/" + data + "\">" + data + "</a>");
					},
					error: function (XMLHttpRequest, textStatus, errorThrown) {
					}
				});
      }

			$(document).ready(function() {
				setInterval(function() {
					pushAndPaste($("#sharebox").val());
				}, 1000);
        
				setInterval(function() {
				  scanForDownload();
				}, 1000);

				$("#sharebox").on("input", function() {
					window.needpush = 1;
					if(window.mutex == 1) window.mutex = -1;
				});

			});

			$("#target").hide();
			pushAndPaste("__INIT__");
		</script>
	</body>
</html>
'

def closeWithHTML(socket, response)
  socket.print "HTTP/1.1 200 OK\r\n" +
    "Content-Type: text/html\r\n" +
    "Content-Length: #{response.bytesize}\r\n" +
    "Connection: close\r\n"
  socket.print "\r\n"
  socket.print response
  socket.close
end

def handleGPClipboard(socket, request)
  board = request.match(/sharebox_post_board=(?<foo>.*)/)["foo"]
  board = URI.unescape(board)
  response = ""
  $semaphore.synchronize {
    if(board == "__INIT__")
      STDERR.puts "INIT received"
    else
      $sharebox = board
    end
    response = $sharebox
  }
  closeWithHTML(socket, response)
end

def handleGPFileUpload(socket, request, boundary)
  boundary = boundary[1..-2] # get rid of carriage returns
  STDERR.puts "BOUNDARY=" + boundary
  request_split = request.split("\r\n")
  file_content = ""
  file_name_match = request_split[1].match(/filename=\"(?<foo>.*)\"/)
  met = 0
  for i in 0..(request_split.size() - 1)
    if request_split[i].match(boundary) != nil
      met += 1
      break if met > 1
    elsif met == 1
      file_content += "\r\n" if file_content != ""
      file_content += request_split[i]
    end
  end
  
  file_name = "NONAME"
  file_name = file_name_match["foo"] if file_name_match != nil
  STDERR.puts file_name
  #STDERR.puts file_content
  $fileSemaphore.synchronize {
    $fileName = file_name
    $fileContent = file_content
  }
  STDERR.puts "ENDBOUNDARY"
  socket.close
  GC.start
end

def handleFileDownload(socket, request_file)
  global_file_name = ""
  global_file_content = ""
  $fileSemaphore.synchronize {
    global_file_name = $fileName
    global_file_content = $fileContent
  }
  if(global_file_name == request_file)
    STDERR.puts "Download filename match"
    socket.print "HTTP/1.1 200 OK\r\n"
    socket.print global_file_content
    socket.close
  else
    STDERR.puts "Download filename not match"
    socket.print "HTTP/1.1 404 Not Found\r\n"
    socket.close
  end
end

server = TCPServer.new(2345)
loop do
  Thread.start(server.accept) do |socket|
    first_line = 1
    content_length = 0
    request_type = 0 # 0 for html, 1 for gpClipboard, 2 for gpFileUpload, 3 for gpFileDownload, 4 for gpFilename, 5 for dropzone.min.js
    boundary = ""
    request_file = ""
    loop do
      request = socket.gets
      STDERR.puts request
      if(first_line == 1)
        first_line = 0
        request_type = 1 if(request.match(/gpClipboard/) != nil)
        request_type = 2 if(request.match(/gpFileUpload/) != nil)
        if(request.match(/gpFileDownload\/(?<foo>.*) /) != nil)
          request_type = 3
          request_file = request.match(/gpFileDownload\/(?<foo>.*) /)["foo"]
          request_file = URI.unescape(request_file)
          STDERR.puts "Got request '#{request_file}'"
        end
        request_type = 4 if(request.match(/gpFilename/) != nil)
        request_type = 5 if(request.match(/gpDropzone\.js/) != nil)
      end

      if(request == "\r\n")
        break
      end
      
      if(request.match(/Content-Length:/) != nil)
        content_length = request.match(/(?<foo>\d+)/)["foo"].to_i
      end
      if(request.match(/Content-Type.*boundary=/) != nil)
        boundary = request.match(/boundary=(?<foo>.*)/)["foo"]
      end
    end
    
    if(content_length > 0)
      request = socket.read(content_length)
      STDERR.puts request if(request_type != 2)
    end
    
    closeWithHTML(socket, sharebox_html) if(request_type == 0)
    handleGPClipboard(socket, request) if(request_type == 1)
    handleGPFileUpload(socket, request, boundary) if(request_type == 2)
    handleFileDownload(socket, request_file) if(request_type == 3)
    closeWithHTML(socket, $fileName) if(request_type == 4)
    closeWithHTML(socket, dropzone) if(request_type == 5)
    
  end
end
